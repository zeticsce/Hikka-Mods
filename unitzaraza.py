__version__ = (1, 5, 0)

'''
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
    ‚ñë‚ñë‚ñà‚ñà‚ñà‚ïî‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ïö‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                          ¬© Copyright 2023
                     https://t.me/zet1csce_bot
'''
# meta developer: @zetxce
# scope: hikka_only


from hikkatl.types import (
    Message,
    MessageEntityBold,
    MessageEntityCode,
    MessageEntityItalic,
    MessageEntitySpoiler,
    MessageEntityStrike,
    MessageEntityUnderline,
)

from hikka import loader
from hikka.utils import answer

import re
import contextlib
import asyncio
import time as _time
import random

import typing


randint = random.SystemRandom().randint
choices = random.SystemRandom().choices


@loader.tds
class UnitZaraza(loader.Module):
    """
    –ü–æ–º–æ—à–Ω–∏–∫ –¥–ª—è @chatzarazabot

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    ‚ñ´Ô∏è üëÅ‚Äçüó® –û—Ç–∫—Ä—ã—Ç—å /me: –º–∏
    ‚ñ´Ô∏è üè¶ –ó–∞—á–µ—Ö–ª–∏—Ç—å –±–∞–Ω–∫: –±–∫
    ‚ñ´Ô∏è üí∏ –†–∞—Å—á–µ—Ö–ª–∏—Ç—å—Å—è: —É–±
    ‚ñ´Ô∏è ü¶† –ó–∞—Ä —á–∞—Ç: –∑—á
    ‚ñ´Ô∏è ü¶† –ó–∞—Ä —Ä–∞–Ω: –∑—Ä
    ‚ñ´Ô∏è üßõüèº –°–º–µ–Ω–∞ –º—É—Ç–∞—Ü–∏–π: –º1, (–º{–Ω–æ–º–µ—Ä –º—É—Ç–∞—Ü–∏–∏})
    ‚ñ´Ô∏è üßõüèº –í–∫–ª—é—á–∏—Ç—å —Ä–∞–Ω–¥–æ–º: —Ä–≥

    –ü–æ–º–æ—â—å: .help UnitZaraza
    """
    strings = {'name': 'UnitZaraza'}


    def __init__(self):
        self._client_is_ready = False


    async def client_ready(self, *_):
        self._client_is_ready = True
        self._history = self.pointer('history', [])

        _ = '{–Ω–æ–º–µ—Ä –º—É—Ç–∞—Ü–∏–∏}'
        self.__doc__ = (
f'''–ü–æ–º–æ—à–Ω–∏–∫ –¥–ª—è @chatzarazabot

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
‚ñ´Ô∏è üëÅ‚Äçüó® –û—Ç–∫—Ä—ã—Ç—å /me: –º–∏
‚ñ´Ô∏è üè¶ –ó–∞—á–µ—Ö–ª–∏—Ç—å –±–∞–Ω–∫: –±–∫
‚ñ´Ô∏è üí∏ –†–∞—Å—á–µ—Ö–ª–∏—Ç—å—Å—è: —É–±
‚ñ´Ô∏è ü¶† –ó–∞—Ä —á–∞—Ç: –∑—á
‚ñ´Ô∏è ü¶† –ó–∞—Ä —Ä–∞–Ω: –∑—Ä
‚ñ´Ô∏è üßõüèº –°–º–µ–Ω–∞ –º—É—Ç–∞—Ü–∏–π: –º1, (–º{_})
‚ñ´Ô∏è üßõüèº –í–∫–ª—é—á–∏—Ç—å —Ä–∞–Ω–¥–æ–º: —Ä–≥

–í—Å–ø–æ–º–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã: {self.get_prefix()}help UnitZaraza'''
        )
        await self.request_join('@zetxce', '–ø–æ–¥–ø–∏—à–∏—Å—å)', True)


    def _save_history(self, action: str, **data) -> None:
        async def saver():
            nonlocal action, data

            self._history.append(
                {
                    **{'action': action, 'time': _time.time()},
                    **data
                }
            )

        asyncio.ensure_future(saver())
        return None


    @loader.watcher(only_messages=True, out=True)
    async def watcher(self, m: Message) -> typing.Optional[Message]:
        if not (text := (m.text or '').lower()):
            return

        result = None
        chat = [m.chat_id, m.id]

        if r := re.fullmatch(
            r'(–º|v)(?P<mutation>1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20)',
                text, re.ASCII
        ):
            result = await self._send(m, f'–º—É—Ç–∞—Ü–∏—è {r.group("mutation")}')
            self._save_history(action='chg_m', value=r.group("mutation"), chat=chat)

        elif text in ('–±–∫', ',r'):
            result = await self._send(m, '/bank_all')
            self._save_history(action='b', chat=chat)

        elif text in ('—É–±', 'e,'):
            result = await self._send(m, '/unbank_all')
            self._save_history(action='ub', chat=chat)

        elif text in ('—Ä–≥', 'hu'):
            result = await self._send(m, '/random_gen')
            self._save_history(action='rg', chat=chat)

        elif text in ('–º–∏', 'vb'):
            result = await self._send(m, '/me@chatzarazabot')
            self._save_history(action='me', chat=chat)

        elif text in ('–∑—Ä', 'pf'):
            result = await self._send(m, '/zar_random@chatzarazabot')
            self._save_history(action='zr', chat=chat)

        elif text in ('–∑—á', 'px'):
            result = await self._send(m, '/zar_chat@chatzarazabot')
            self._save_history(action='zc', chat=chat)

        return result


    def _just_dont(self, text: '–ø–æ—Ö—É–π, —Ö–æ—Ç—å –±–¥ –∏—Ä–∏—Å–∞ —Å—é–¥–∞ –ø–µ—Ä–µ–¥–∞–≤–∞–π –±—Ä–∞—Ç') -> str:
        txt = ''
        ents = []

        for s in str(text):
            if randint(0, 1):
                s = s.lower() if s.upper() == s else s.upper()

            txt += s

        last_ent = -1
        for i in range(len(text)):
            if last_ent + 1 > i:
                break

            ent_len = randint(last_ent + 2, len(text) - 1)
            last_ent = ent_len 

            RandomEntity = choices(
                [
                    MessageEntityBold,
                    MessageEntityCode,
                    MessageEntityItalic,
                    MessageEntitySpoiler,
                    MessageEntityStrike,
                    MessageEntityUnderline,
                ]
            )[0]

            ents += [RandomEntity(last_ent + 1, ent_len)]

        return self._client.parse_mode.unparse(txt, ents)




    async def _send(self, m: Message, *a, **kw):
        m.out = False
        result = await answer(m, *a, **{**{'link_preview': False}, **kw})

        async def delete():
            nonlocal m
            with contextlib.suppress(Exception):
                await asyncio.sleep(1)
                await m.delete()

        asyncio.ensure_future(delete())

        return result

# —Ä–µ–∫–ª–∞–º–∞ (–æ—Ö–≤–∞—Ç - –¥–≤–∞ –µ–±–ª–∞–Ω–∞ –∑–∞–ª–µ–∑—à–∏—Ö –≤ –∫–æ–¥): –Ω–∞–±–æ—Ä –≤ —É–ª–µ–π —Ç—è–∂–µ–ª–æ @tohive