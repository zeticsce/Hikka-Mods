__version__ = (1, 2, 0)

#           ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
#           ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
#           ‚ñë‚ñë‚ñà‚ñà‚ñà‚ïî‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë
#           ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ïö‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë
#           ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
#           ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
#                                ¬© Copyright 2024
#                            https://t.me/zet1csce_bot
#
# meta developer: @zet1csce_bot

from hikka import loader, utils
from hikkatl.types import Message
import logging
import traceback


@loader.tds
class –ü–æ–≤—Ç–æ—Ä(loader.Module):
    """ü§∑‚Äç‚ôÄÔ∏è –ö–∞–∫–æ–π-—Ç–æ –º–æ–¥—É–ª—å"""
    
    strings = {'name': '–ü–æ–≤—Ç–æ—Ä'}
    
    @loader.command(alias='c')
    async def —Å(self, m: Message) -> Message:
        """
        [—Ç–µ–∫—Å—Ç]
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
        """
        if not (args := utils.get_args_raw(m)):
            return await utils.answer(m, 
                '<emoji document_id=5456337168781810982>üòî</emoji> <b>–ß—Ç–æ —Å–∫–∞–∑–∞—Ç—å —Ç–æ?)</b>'
            )

        len_prefix = len(self.get_prefix()) # –Ω–∞ –±—É–¥—É—â–µ–µ)
        len_cmd = len(m.raw_text[len_prefix:].strip().split(maxsplit=1)[0]) + len_prefix

        return await m.respond(
            m.raw_text[len_cmd:],
            parse_mode=lambda x: (
                x,
                utils.relocate_entities(m.entities, len_cmd * -1, m.raw_text) 
                or ()
            ),
            reply_to=getattr(m.reply_to, 'reply_to_msg_id', None),
        )


    @loader.command(alias='cc')
    async def —Å—Å(self, m: Message) -> Message:
        """
        [–∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏] (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 1)
        –ù–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É
        """        
        if not (r := await m.get_reply_message()):
            return await utils.answer(m,
                '<emoji document_id=5456337168781810982>üòî</emoji> <b>–ì–î–ï –†–ï–ü–õ–ê–ô –ú–ê–¢–¨ –¢–í–û–Æ??</b>')
        try:
            index = int(args := utils.get_args_raw(m) or 1)
            if index >= 0:
                index -= 1
        except ValueError:
            return await utils.answer(m, 
                f'<emoji document_id=5456337168781810982>üòî</emoji> <b>`{args}` <- –≠—Ç–æ –ø–æ-—Ç–≤–æ–µ–º—É —á–∏—Å–ª–æ?</b>')
        
        try:
            if text := getattr(await r.click(index), 'message', None):
                return await utils.answer(m, text)
        except Exception:
            return await utils.answer(m, utils.escape_html(traceback.format_exc()))
